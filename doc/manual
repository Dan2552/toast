

* Overview
* Installation
* Configuration
* REST API
** Semantics of HTTP
   
   The semantics of the HTTP Verbs GET, PUT, POST and DELETE are given
   in []. However, there is room for interpretation. Toast tries to be
   close to those definitions while narrowing them down to fit to the
   technical ... , security measures and pragmatic ... of DB-backed
   resources.

*** Resource
    A resource is data object stored on the server. Resources can be
    read by requesting a representation of it.


*** Representation     
    The primary representation of resources in 
    Toast is JSON:

    1. responses are in JSON when no format extension is used in the request's URI
    2. requests with payload (POST/PUT) are expected to be in JSON 

    However, there can be other representations of a resource for GET
    requests. Any view defined in the directory: app/views/resources
    will be used for the response, when a format extension is appended to
    the resource URI (.xml, .html,...). 

    Toast delegates in this case to Rails' standard view rendering.
    So, one can use erb, haml, xml-builder templates whatever view
    renderer you have at hand. This can also be a JSON view, if there
    is a need to have a different JSON schema than Toast's default.
    
    Note that this freedom is only available for reading. Payloads
    from clients have to be JSON according to the Toast default schema.

*** JSON default schema 

    Toast uses flat (not nested) JSON objects or Arrays of flat JSON
    objects. The property names of those objects are equal to the attribute
    names of the model which are exposed. This includes virtual attributes defined in
    the model class. The property values are JSON representations of
    the model's attribute values, encoded with 'to_json'. (if the
    value is a serialized Array, Hash or Ruby object, then nesting will
    accur, which is transparent to Toast.)

    All associations defined in the model (and are expoesed) will be result in
    URI's that point to the resource or resource collection, that can
    be fetched via this URI. The property name is equal to the
    association name.
        
    The property "uri" is always included in the JSON representation.
    It points to the resource it belongs to and is the unique
    identifier of a resource. Because of that, the attribute name
    "uri" is not allowed to be used in the model. 

    Payloads in POST/PUT have to follow the same schema. 

    

 
*** GET
*** PUT
- "uri" is ignored
    - associations URI's are ignored
    - all not explicitly writable attributes/properties are ignored (see
      configuraton)
    - all unknown attributes/properties are ingored

*** POST
*** DELETE

*** HTTP response codes

    There is a plenty of response codes defined for HTTP (see []). The
    line Toast follows is security based: "Don't tell the client more
    than necessary". That's why Toast only responds with a few
    and general response codes. 
    
    A hacking client should not be able to collect information about
    the internal structure of the application or data base. 

    Returning a 'Forbidden' header when an attribute is not readable
    or writable and "Not Found" it doesn't exist
    would be semantically ok, but reveals what other internal
    attributes are used. 

    An "Internal Server Error" might occur, but wouldn't help any
    client, but reveals a bug, which could be exploited. 
    "Not Found" is more secretive in this case.

    etc.
       
    200 OK
    201 Created 
    400 Bad Request
    404 Not Found
    405 Method Not Allowed
    415 Unsupported Media Type
    (500 Internal Server Error)
    (403 Forbidden)



*** HTTP headers

*** Discussion

The REST principles of a web of information should be reflective. That
means to give clients the opportunity to "positively" hack a site to
find information, like surfing the web. ... vs Security. 


